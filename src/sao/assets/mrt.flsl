
use namespace flare;
use namespace flare.transforms;

// ===================================================================

const float2 m = float2( 0.5,-0.5 );

// ===================================================================

sampler2D diffuseMap;
sampler2D normalMap;
sampler2D specularMap;

sampler2D colorBuffer <mip = 0, wrap = 0>;
sampler2D gBuffer <mip = 0, wrap = 0>;
sampler2D lightBuffer <mip = 0, wrap = 0>;
sampler2D glowBuffer <mip = 0, wrap = 0>;

param NEAR_FAR nearFar;

param float emissive = 0;

// base MRT material.
technique base {
	output vertex = position.xyzw * worldViewProj;
	output fragment[2];
	interpolated float iDepth = (position.xyzw * worldView).z;
	interpolated float3 iNormal = normal * worldView.xyz;
	fragment[0] = float4( sampler2D( diffuseMap, iUV0 ).rgb, emissive );
	fragment[1] = float4( iDepth / nearFar.z, normalize( iNormal.xyz ) * 0.5 + 0.5 );
}

// sky MRT material.
technique sky {
	samplerCube skybox;
	float4 hPos = float4(position,0);
	output vertex = (hPos * worldViewProj).xyww;
	output cullFace = "none";
	output depthWrite = false;
	output fragment[2];
	param float4 tint = float4( 0.3, 0.4, 0.5, 1 );
	fragment[0] = float4( samplerCube( skybox, interpolate( -normal ) ).rgb, 1 ) * tint;
	fragment[1] = 1;
}

// basic quad.
technique quad {
	output vertex = position.xyzw;
	output fragment = sampler2D( colorBuffer, iUV0 );
}

// renders only emissive color.
technique emissiveColor {
	output vertex = position.xyzw;
	float4 color = sampler2D( colorBuffer, iUV0 );
	output fragment = float4( color.rgb * color.a, 1 )
}

// final composition.
technique compose {
	param float contrast = 2;
	param float4 ambient = float4( 0.4, 0.2, 0.1, 1 );
	param float4 fogColor = float4( 0.1, 0.2, 0.3, 1 );
	
	float4 color = sampler2D( colorBuffer, iUV0 );
	float4 lights = sampler2D( lightBuffer, iUV0 );
	float4 gData = sampler2D( gBuffer, iUV0 );
	float4 glow = sampler2D( glowBuffer, iUV0 );
	
	// fog: this needs to be calculated properly.
	float fog = gData.x * 0.75;
	fog = saturate( 1 / exp(fog) );
	
	float3 l = lights.rgb + ambient.rgb;
	float3 r = color.rgb * max( pow( l, contrast ), color.www );
	
	r += pow( glow.rgb, 0.6 );
	r += r * lights.w;
	r = lerp( fogColor.rgb, r, fog ) 
	
	output vertex = position.xyzw;
	output fragment = float4( r, 1 );
}